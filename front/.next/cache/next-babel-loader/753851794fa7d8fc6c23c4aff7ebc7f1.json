{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/neko/99.etc/webapp-template/front/lib/with-mobx-store.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { initializeStore } from '../stores';\nconst isServer = true;\nconst __NEXT_MOBX_STORE__ = '__NEXT_MOBX_STORE__';\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!window[__NEXT_MOBX_STORE__]) {\n    window[__NEXT_MOBX_STORE__] = initializeStore(initialState);\n  }\n\n  return window[__NEXT_MOBX_STORE__];\n}\n\nexport default (App => {\n  return class AppWithMobx extends React.Component {\n    static async getInitialProps(appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const mobxStore = getOrCreateStore(); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.mobxStore = mobxStore;\n      let appProps = {};\n\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps.call(App, appContext);\n      }\n\n      return _objectSpread({}, appProps, {\n        initialMobxState: mobxStore\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.mobxStore = getOrCreateStore(props.initialMobxState);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        mobxStore: this.mobxStore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }));\n    }\n\n  };\n});","map":{"version":3,"sources":["/Users/neko/99.etc/webapp-template/front/lib/with-mobx-store.js"],"names":["React","initializeStore","isServer","__NEXT_MOBX_STORE__","getOrCreateStore","initialState","window","App","AppWithMobx","Component","getInitialProps","appContext","mobxStore","ctx","appProps","call","initialMobxState","constructor","props","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA,MAAMC,QAAQ,OAAd;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;;AAEA,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AACtC;AACA,MAAIH,QAAJ,EAAc;AACZ,WAAOD,eAAe,CAACI,YAAD,CAAtB;AACD,GAJqC,CAMtC;;;AACA,MAAI,CAACC,MAAM,CAACH,mBAAD,CAAX,EAAkC;AAChCG,IAAAA,MAAM,CAACH,mBAAD,CAAN,GAA8BF,eAAe,CAACI,YAAD,CAA7C;AACD;;AACD,SAAOC,MAAM,CAACH,mBAAD,CAAb;AACD;;AAED,gBAAgBI,GAAD,IAAS;AACtB,SAAO,MAAMC,WAAN,SAA0BR,KAAK,CAACS,SAAhC,CAA0C;AAC/C,iBAAaC,eAAb,CAA8BC,UAA9B,EAA0C;AACxC;AACA;AACA,YAAMC,SAAS,GAAGR,gBAAgB,EAAlC,CAHwC,CAKxC;;AACAO,MAAAA,UAAU,CAACE,GAAX,CAAeD,SAAf,GAA2BA,SAA3B;AAEA,UAAIE,QAAQ,GAAG,EAAf;;AACA,UAAI,OAAOP,GAAG,CAACG,eAAX,KAA+B,UAAnC,EAA+C;AAC7CI,QAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBK,IAApB,CAAyBR,GAAzB,EAA8BI,UAA9B,CAAjB;AACD;;AAED,+BACKG,QADL;AAEEE,QAAAA,gBAAgB,EAAEJ;AAFpB;AAID;;AAEDK,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKN,SAAL,GAAiBR,gBAAgB,CAACc,KAAK,CAACF,gBAAP,CAAjC;AACD;;AAEDG,IAAAA,MAAM,GAAG;AACP,aACE,MAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,QAAA,SAAS,EAAE,KAAKN,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAGD;;AA7B8C,GAAjD;AA+BD,CAhCD","sourcesContent":["import React from 'react';\nimport { initializeStore } from '../stores';\n\nconst isServer = typeof window === 'undefined'\nconst __NEXT_MOBX_STORE__ = '__NEXT_MOBX_STORE__'\n\nfunction getOrCreateStore(initialState) {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (isServer) {\n    return initializeStore(initialState)\n  }\n\n  // Create store if unavailable on the client and set it on the window object\n  if (!window[__NEXT_MOBX_STORE__]) {\n    window[__NEXT_MOBX_STORE__] = initializeStore(initialState)\n  }\n  return window[__NEXT_MOBX_STORE__]\n}\n\nexport default (App) => {\n  return class AppWithMobx extends React.Component {\n    static async getInitialProps (appContext) {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const mobxStore = getOrCreateStore()\n\n      // Provide the store to getInitialProps of pages\n      appContext.ctx.mobxStore = mobxStore\n\n      let appProps = {}\n      if (typeof App.getInitialProps === 'function') {\n        appProps = await App.getInitialProps.call(App, appContext)\n      }\n\n      return {\n        ...appProps,\n        initialMobxState: mobxStore\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      this.mobxStore = getOrCreateStore(props.initialMobxState)\n    }\n\n    render() {\n      return (\n        <App {...this.props} mobxStore={this.mobxStore} />\n      )\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}